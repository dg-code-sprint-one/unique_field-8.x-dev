<?php


// query scope definitions - same as in 7 version
define('UNIQUE_FIELD_SCOPE_NODE', 'node');
define('UNIQUE_FIELD_SCOPE_TYPE', 'type');
define('UNIQUE_FIELD_SCOPE_LANGUAGE', 'language');
define('UNIQUE_FIELD_SCOPE_ALL', 'all');

// query comparison definitions - same as in 7 version
define('UNIQUE_FIELD_COMP_EACH', 'each');
define('UNIQUE_FIELD_COMP_ALL', 'all');

// query field definitions - same as in 7 version
define('UNIQUE_FIELD_FIELDS_TITLE', 'title');
define('UNIQUE_FIELD_FIELDS_AUTHOR', 'name');
define('UNIQUE_FIELD_FIELDS_LANGUAGE', 'language');

// setting definition - same as in 7 version
define('UNIQUE_FIELD_SHOW_MATCHES', 'show_matches');

/* used for hook_help */
use Drupal\Core\Routing\RouteMatchInterface;
/*used for hook_form_BASE_FORM_ID_alter*/
use Drupal\Core\Form\FormStateInterface;


/*used for entity builder*/
use Drupal\field\Entity;
use Drupal\node\NodeInterface;
use Drupal\node\Entity\NodeType;

use Drupal\field\Entity\FieldConfig;

use Drupal\Core\Entity\EntityManager;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\EntityTypeInterface;

/*used for language*/
use Drupal\Core\Language;



/**
 * Implements hook_help().
 */
function unique_field_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
  	case 'help.page.unique_field':
  	$output = '';
  	$output.= t('The Unique Field module allows administrators to require that content supplied for specified fields is unique. For example, you may require that each node has a unique title or a different author. For configuration options, please see the <em>Unique Field restrictions</em> section of a content type\'s administration page.');
  	return $output;

  }
}

/**
 * hook_form_BASE_FORM_ID_alter()
 */
function unique_field_form_alter(array &$form, FormStateInterface $form_state, $form_id) {
  $bundles = entity_get_bundles('node');
  $bundle_id = array();
  foreach ($bundles as $key => $value) {
    $bundle_id['node_'.$key.'_form'] = $key;
    $bundle_id['node_'.$key.'_add_form'] = $key;
    $bundle_id['node_'.$key.'_edit_form'] = $key;
  }
  if(in_array($form_id, array_keys($bundle_id))){
    $form['#validate'][] = 'unique_field_form_validate';
    $form['bundle'] = $bundle_id[$form_id];
  }
  // add user access permission later
  if ( ($form_id == 'node_type_add_form' || $form_id == 'node_type_edit_form') && isset($form['type']) ) {
  	
  	// load fields for content type
  	$type = $form_state->getFormObject()->getEntity();
  	$ntype = $type->id();


  	$nodetype = !empty($ntype) ? NodeType::load($ntype) : FALSE;
  	$fieldopts = array();

  	// $fieldopts[UNIQUE_FIELD_FIELDS_TITLE] =  t('Title');
 	$fieldopts[UNIQUE_FIELD_FIELDS_AUTHOR] = t('Author');
 	if ((\Drupal::moduleHandler()->moduleExists('language')) && !empty($ntype) && \Drupal::languageManager()->getCurrentLanguage()->getId()) {
 	   $fieldopts[UNIQUE_FIELD_FIELDS_LANGUAGE] = t('Language');
	 }

	if (!empty($ntype)) {
	    $entity_type_id = 'node';
	    $bundle = $ntype;
	    foreach (\Drupal::entityManager()->getFieldDefinitions($entity_type_id, $bundle) as $field_name => $field_definition){
	      if (!empty($field_definition->getTargetBundle())) {
	        $fieldopts[$field_name] = $field_definition->getLabel() . '('.$field_name.')';
	      }
	    }
	}
  
  //load default values
  $config = \Drupal::configFactory()->get('unique_field.settings');

  //buid the unique field form
  $form['#tree'] = TRUE;  
  $form['unique_field'] = array(
    '#title' => t('Unique Field restrictions'),
    '#type' => 'details',
    '#group' => 'additional_settings',
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    '#weight' => 1,      
  );

  $form['unique_field']['unique_field_fields'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Choose the fields that should be unique'),
    '#options' => $fieldopts,
    '#default_value' => !empty($ntype) ? $config->get('unique_field_settings.' . $ntype . '.fields') : array(),
    '#description' => t('After designating that certain fields should be unique, users will not be able to submit the content form to create a new node or update an existing one if it contains values in the designated fields that duplicate others.'),
  );

  $form['unique_field']['unique_field_scope'] = array(
    '#type' => 'radios',
    '#title' => t('Choose the scope for the unique values'),
    '#options' => array(
      UNIQUE_FIELD_SCOPE_TYPE => t('Content type'),
      UNIQUE_FIELD_SCOPE_LANGUAGE => t('Language'),
      UNIQUE_FIELD_SCOPE_ALL => t('All nodes'),
      UNIQUE_FIELD_SCOPE_NODE => t('Single node only'),
    ),
    '#default_value' => !empty($ntype) ? $config->get('unique_field_settings.' . $ntype . '.scope') : UNIQUE_FIELD_SCOPE_TYPE,
    '#description' => t('Choose whether the values in the specified fields must be unique among nodes of this content type, among nodes of the same language, among all nodes, or only among the fields of the present node.'),
  );

  $form['unique_field']['unique_field_comp'] = array(
    '#type' => 'radios',
    '#title' => t('Choose whether values must be unique individually or in combination'),
    '#options' => array(
      UNIQUE_FIELD_COMP_EACH => t('Each of the specified fields must have a unique value'),
      UNIQUE_FIELD_COMP_ALL => t('The combination of values from the specified fields must be unique'),
    ),
    '#default_value' => empty($ntype) ? $config->get('unique_field_settings.' . $ntype . '.comp') : UNIQUE_FIELD_COMP_EACH,
    '#description' => t('For example, if you have fields for the parts of a street address (street number and name, city, and zip code) on a node, and want to allow only one node per complete address, but not only one node per city or per zip code, then you would want to choose that the fields must be unique in combination.'),
  );

  $form['unique_field']['unique_field_show_matches'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Check this box to show which nodes match when duplicate values are found'),
    '#options' => array(UNIQUE_FIELD_SHOW_MATCHES => t('Enabled')),
    '#default_value' => !empty($ntype) ? $config->get('unique_field_settings.' . $ntype . '.show_matches') : array(),
  );

  // add validation function in submit handler
   $form['actions']['submit']['#submit'][] = 'unique_field_form_node_type_form_submit';  
  }
}

function unique_field_form_validate(array &$form, FormStateInterface $form_state){
 
  $config = \Drupal::configFactory()->get('unique_field.settings');

  $fields = $config->get('unique_field_settings.' . $form['bundle'] . '.fields');
  $scope = $config->get('unique_field_settings.' . $form['bundle'] . '.scope');
  $comp_type = $config->get('unique_field_settings.' . $form['bundle'] . '.comp');
  
  $title = $form_state->getValues()['title'][0]['value'];
  $langcode = $form_state->getValues()['langcode'][0]['value'];
  $node = \Drupal::routeMatch()->getParameter('node');
  if($comp_type == UNIQUE_FIELD_COMP_ALL){
    $query = db_select('node_field_data', 'n');
    $query -> fields('n', array('nid'));
  }
  foreach($fields as $field_name){
    if($comp_type == UNIQUE_FIELD_COMP_EACH){
      $query = db_select('node_field_data', 'n');
      $query -> fields('n', array('nid'));
    }
    $query = db_select('node_field_data', 'n');
    $query -> fields('n', array('nid'));
    if($field_name == 'title'){
      $query -> condition('n.title', $title);
    }
    else{
      $field_type = \Drupal\field\Entity\FieldStorageConfig::loadByName('node', $field_name)->get('type');
      $values = $form_state->getValues()[$field_name];
      $field_values = array();
      foreach ($values as $value){
        $field_values[] = ($field_type == 'entity_reference') ? $value['target_id'] : $value['value'];
      }
      if($scope == UNIQUE_FIELD_SCOPE_NODE){
        $unique_values = array_unique($field_values);
        if(count($field_values) != count($unique_values)){
          $form_state->setErrorByName($field_name, t("The field $field_name has to be unique."));
          $form_state->setRebuild();
          continue;
        }
      }      
      $table_name = 'node__'.$field_name;
      $col_name = $field_type == 'entity_reference' ? $field_name.'_target_id' : $field_name.'_value';

      $query -> join($table_name, 'f', 'n.nid = f.entity_id');
      $query -> condition('f.'.$col_name, $field_values, 'IN');
      
      if($scope == UNIQUE_FIELD_SCOPE_LANGUAGE){
        $query -> condition('f.langcode', $langcode);
      }
    }
    if($scope == UNIQUE_FIELD_SCOPE_TYPE){
      $query -> condition('n.type', $form['bundle']);
    }
    if ($node) {
      $query -> condition('n.nid', $node->id(), '<>');
    }
    $res = $query -> execute() -> fetchField();
    if($res){
      $form_state->setErrorByName($field_name, t("The field $field_name has to be unique."));
      $form_state->setRebuild();
    }
  }
}

/**
 * Submit handler for the form.
 *
 */
function unique_field_form_node_type_form_submit(&$form,FormStateInterface $form_state) {

	$ntype = $form_state->getFormObject()->getEntity();

	$unique_field_field_items = $form_state->getValue(['unique_field', 'unique_field_fields']);
	if (!empty($unique_field_field_items)) {
		foreach (array_keys($unique_field_field_items, '0') as $key) {
    		unset($unique_field_field_items[$key]);
		}	
		\Drupal::configFactory()->getEditable('unique_field.settings')
    	->set('unique_field_settings.' . $ntype->id() . '.fields', $unique_field_field_items)
    	->save();
	}	

    $unique_field_scope_items = $form_state->getValue(['unique_field', 'unique_field_scope']);
    if (!empty($unique_field_scope_items)) {
    	\Drupal::configFactory()->getEditable('unique_field.settings')
    	->set('unique_field_settings.' . $ntype->id() . '.scope', $unique_field_scope_items)
    	->save();
    }

    $unique_field_comp_items = $form_state->getValue(['unique_field', 'unique_field_comp']);
    if (!empty($unique_field_comp_items)) {
    	\Drupal::configFactory()->getEditable('unique_field.settings')
    	->set('unique_field_settings.' . $ntype->id() . '.comp', $unique_field_comp_items)
    	->save();    	
    }

    $unique_field_show_matches = $form_state->getValue(['unique_field','unique_field_show_matches']);
    if (!empty($unique_field_show_matches)) {
   		\Drupal::configFactory()->getEditable('unique_field.settings')
    	->set('unique_field_settings.' . $ntype->id() . '.show_matches', $unique_field_show_matches)
    	->save();
    }

	if ($form_state->getValue(['unique_field','unique_field_scope']) === UNIQUE_FIELD_SCOPE_NODE) {
		if ($form_state->getValue(['unique_field','unique_field_comp']) === UNIQUE_FIELD_COMP_ALL) {
			drupal_set_message(t('The scope of a single node requires that each field must be unique.'), 'error');
    		$form_state->setRebuild();
		}

		
		if (($form_state->getValue(['unique_field','unique_field_fields',UNIQUE_FIELD_FIELDS_AUTHOR]) === UNIQUE_FIELD_FIELDS_AUTHOR)||(!empty($form_state->getValue(['unique_field','unique_field_fields', UNIQUE_FIELD_FIELDS_LANGUAGE])) && $form_state->getValue(['unique_field','unique_field_fields', UNIQUE_FIELD_FIELDS_LANGUAGE]) === UNIQUE_FIELD_FIELDS_LANGUAGE )) {  
			drupal_set_message(t('The author and language fields are not supported within the scope of a single node.'), 'error');
    		$form_state->setRebuild();
    	}	
	}	

}

/**
 * Implements hook_entity_bundle_field_info_alter().
 * For validation of fields 
 */
function unique_field_entity_bundle_field_info_alter(&$fields, EntityTypeInterface $entity_type, $bundle) {
	
   if($entity_type ->id() === 'node'){
   	print_r($bundle);
   	//load default configuration
  	$config = \Drupal::configFactory()->get('unique_field.settings');

  	// get list of unique fields for node type	
  	$unique_filed_fields = $config->get('unique_field_settings.' . $bundle . '.fields');
  	if (count($unique_filed_fields)) {

	  	// get unique field settings for this node type
	    $scope = $config->get('unique_field_settings.' . $bundle . '.scope');
	    $comp = $config->get('unique_field_settings.' . $bundle . '.comp');
	    $var_show_matches = $config->get('unique_field_settings.' . $bundle . '.show_matches');    
	    $show_matches = is_array($var_show_matches) && in_array(UNIQUE_FIELD_SHOW_MATCHES, $var_show_matches);
    }
  }

}
